# -*- coding: utf-8 -*-
"""CNN+BiGRU.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A8S_Hf4WnX7U1dxK77fnhxqVai6ow0sK
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, label_binarize
from torch.utils.data import Dataset, DataLoader
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
import seaborn as sns
from itertools import cycle

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 1. Load dataset
df = pd.read_csv(r"C:\Users\anjali_jain\Downloads\emotion_dataset_cleaned.csv")

# 2. Split features and labels
X = df.drop('label', axis=1).values
y = df['label'].values

# 3. Encode labels
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# 4. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.4, stratify=y_encoded, random_state=42)

# 5. Reshape for CNN input
X_train = X_train[..., np.newaxis]
X_test = X_test[..., np.newaxis]

# 6. Convert to torch tensors
X_train = torch.tensor(X_train, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.long)
y_test = torch.tensor(y_test, dtype=torch.long)

# 7. Dataset and DataLoader
class EmotionDataset(Dataset):
    def __init__(self, X, y):
        self.X = X
        self.y = y
    def __len__(self):
        return len(self.X)
    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

train_dataset = EmotionDataset(X_train, y_train)
test_dataset = EmotionDataset(X_test, y_test)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32)

# 8. Model Definition
# (a) Remove unused arg, simplify forward
class CNNBiGRUModel(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.features = nn.Sequential(
            nn.Conv1d(1, 32, 3, padding=1), nn.ReLU(),
            nn.MaxPool1d(2),
            nn.Conv1d(32, 64, 3, padding=1), nn.ReLU(),
            nn.MaxPool1d(2),
        )                       # <- only 2 pools to keep sequence length
        self.bigru = nn.GRU(input_size=64, hidden_size=128,
                            batch_first=True, bidirectional=True)
        self.classifier = nn.Sequential(
            nn.Dropout(0.3),
            nn.Linear(128*2, num_classes)
        )

    def forward(self, x):
        x = x.permute(0, 2, 1)      # B,1,F → B,F,1 → B,1,F
        x = self.features(x)        # B,64,T
        x = x.permute(0, 2, 1)      # B,T,64
        _, h = self.bigru(x)        # h: 2×B×128
        h = torch.cat((h[0], h[1]), dim=1)  # B,256
        return self.classifier(h)

# 9. Initialize model
input_dim = X_train.shape[1]
num_classes = len(np.unique(y_encoded))
#model = CNNBiGRUModel(input_dim=input_dim, num_classes=num_classes).to(device)

model = CNNBiGRUModel(num_classes=num_classes).to(device)



# 10. Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 11. Training
# 11. Training with Early Stopping
train_acc_list, val_acc_list = [], []
best_val_acc = 0.0
patience = 10
counter = 0
best_model_state = None

for epoch in range(100):
    model.train()
    correct, total, running_loss = 0, 0, 0.0
    for X_batch, y_batch in train_loader:
        X_batch, y_batch = X_batch.to(device), y_batch.to(device)
        optimizer.zero_grad()
        outputs = model(X_batch)
        loss = criterion(outputs, y_batch)
        loss.backward()
        optimizer.step()

        _, predicted = torch.max(outputs.data, 1)
        total += y_batch.size(0)
        correct += (predicted == y_batch).sum().item()
        running_loss += loss.item()

    train_acc = correct / total
    train_acc_list.append(train_acc)

    # Validation accuracy
    model.eval()
    correct_val, total_val = 0, 0
    with torch.no_grad():
        for X_batch, y_batch in test_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            outputs = model(X_batch)
            _, predicted = torch.max(outputs.data, 1)
            total_val += y_batch.size(0)
            correct_val += (predicted == y_batch).sum().item()
    val_acc = correct_val / total_val
    val_acc_list.append(val_acc)

    print(f"Epoch {epoch+1}, Loss: {running_loss:.4f}, Train Acc: {train_acc:.4f}, Val Acc: {val_acc:.4f}")

    # Early stopping check
    if val_acc > best_val_acc:
        best_val_acc = val_acc
        best_model_state = model.state_dict()
        counter = 0
    else:
        counter += 1
        if counter >= patience:
            print(f"Early stopping triggered at epoch {epoch+1}")
            break

# Load best model
if best_model_state:
    model.load_state_dict(best_model_state)

# 12. Evaluation
model.eval()
y_pred, y_true = [], []
with torch.no_grad():
    for X_batch, y_batch in test_loader:
        X_batch = X_batch.to(device)
        outputs = model(X_batch)
        _, predicted = torch.max(outputs.data, 1)
        y_pred.extend(predicted.cpu().numpy())
        y_true.extend(y_batch.numpy())

# 13. Classification Report
print("Classification Report CNN+BiGRU:")
print(classification_report(y_true, y_pred, target_names=encoder.classes_))

# 14. Confusion Matrix
conf_matrix = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(10, 6))
sns.heatmap(conf_matrix / np.sum(conf_matrix, axis=0), annot=True, fmt='.2%', cmap='Blues',
            xticklabels=encoder.classes_, yticklabels=encoder.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix - CNN+BiGRU')
plt.tight_layout()
plt.savefig("CNN_BiGRU_confusion_matrix.png")
plt.show()

# 15. ROC Curve
y_score = []
model.eval()
with torch.no_grad():
    for X_batch, _ in test_loader:
        X_batch = X_batch.to(device)
        logits = model(X_batch)
        y_score.append(torch.softmax(logits, dim=1).cpu().numpy())
y_score = np.vstack(y_score)

# Binarize y_test
y_test_binarized = label_binarize(y_true, classes=list(range(num_classes)))

fpr, tpr, roc_auc = {}, {}, {}
for i in range(num_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_score[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

fpr["micro"], tpr["micro"], _ = roc_curve(y_test_binarized.ravel(), y_score.ravel())
roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

plt.figure()
lw = 2
colors = cycle(['aqua', 'darkorange', 'cornflowerblue', 'green', 'red', 'purple', 'brown'])
for i, color in zip(range(num_classes), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=lw,
             label=f'ROC curve of class {encoder.classes_[i]} (area = {roc_auc[i]:.2f})')
plt.plot([0, 1], [0, 1], 'k--', lw=lw)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - CNN+BiGRU')
plt.legend(loc="lower right")
plt.tight_layout()
plt.savefig("CNN_BiGRU_ROC_Curve.png")
plt.show()

