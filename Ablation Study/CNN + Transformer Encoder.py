# -*- coding: utf-8 -*-
"""CNN+ Transformer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jpx64iC4LPNy5A2DiTOfyxItG2SH-Vg3
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from itertools import cycle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, label_binarize
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader

# 1. Load dataset
df = pd.read_csv(r"C:\Users\anjali_jain\Downloads\emotion_dataset_cleaned.csv")
X = df.drop("label", axis=1).values
y = df["label"].values

# 2. Encode labels
encoder = LabelEncoder()
y = encoder.fit_transform(y)
num_classes = len(np.unique(y))

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.4, stratify=y, random_state=42
)

# 4. Reshape for CNN input
X_train = X_train.reshape(X_train.shape[0], -1, 1)
X_test = X_test.reshape(X_test.shape[0], -1, 1)

# 5. Convert to tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)
y_test_tensor = torch.tensor(y_test, dtype=torch.long)

train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
test_dataset = TensorDataset(X_test_tensor, y_test_tensor)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32)

# 6. Attention layer
class Attention(nn.Module):
    def __init__(self, hidden_dim):
        super(Attention, self).__init__()
        self.attn = nn.Linear(hidden_dim * 2, 1)

    def forward(self, rnn_output):
        # rnn_output: (batch, seq_len, hidden_dim*2)
        attn_weights = self.attn(rnn_output).squeeze(-1)  # (batch, seq_len)
        attn_weights = torch.softmax(attn_weights, dim=1)
        context = torch.sum(rnn_output * attn_weights.unsqueeze(-1), dim=1)  # (batch, hidden_dim*2)
        return context, attn_weights

# 7. CNN + BiGRU + Attention model
class CNN_BiGRU_Attention(nn.Module):
    def __init__(self, input_dim, cnn_out_channels, gru_hidden, num_classes):
        super(CNN_BiGRU_Attention, self).__init__()
        self.cnn = nn.Sequential(
            nn.Conv1d(in_channels=input_dim, out_channels=cnn_out_channels, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool1d(kernel_size=2)
        )
        self.bigru = nn.GRU(
            input_size=cnn_out_channels, hidden_size=gru_hidden,
            batch_first=True, bidirectional=True
        )
        self.attention = Attention(hidden_dim=gru_hidden)
        self.classifier = nn.Sequential(
            nn.Linear(gru_hidden * 2, 64),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(64, num_classes)
        )

    def forward(self, x):
        # x: (batch, seq_len, 1)
        x = x.permute(0, 2, 1)              # (batch, 1, seq_len)
        x = self.cnn(x)                     # (batch, cnn_channels, seq_len//2)
        x = x.permute(0, 2, 1)              # (batch, seq_len//2, cnn_channels)
        gru_out, _ = self.bigru(x)          # (batch, seq_len//2, hidden*2)
        context, _ = self.attention(gru_out)
        out = self.classifier(context)
        return out

# 8. Training setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CNN_BiGRU_Attention(input_dim=1, cnn_out_channels=64, gru_hidden=128, num_classes=num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 9. Training loop with Early Stopping
best_val_acc = 0.0
patience = 5
counter = 0
best_model_state = None
train_acc = []
val_acc = []

for epoch in range(100):  # Increased to allow early stopping
    model.train()
    total, correct, total_loss = 0, 0, 0
    for xb, yb in train_loader:
        xb, yb = xb.to(device), yb.to(device)
        optimizer.zero_grad()
        out = model(xb)
        loss = criterion(out, yb)
        loss.backward()
        optimizer.step()
        preds = out.argmax(dim=1)
        correct += (preds == yb).sum().item()
        total += yb.size(0)
        total_loss += loss.item()
    epoch_train_acc = correct / total
    train_acc.append(epoch_train_acc)

    # Validation accuracy
    model.eval()
    val_correct, val_total = 0, 0
    with torch.no_grad():
        for xb, yb in test_loader:
            xb, yb = xb.to(device), yb.to(device)
            out = model(xb)
            preds = out.argmax(dim=1)
            val_correct += (preds == yb).sum().item()
            val_total += yb.size(0)
    epoch_val_acc = val_correct / val_total
    val_acc.append(epoch_val_acc)

    print(f"Epoch {epoch+1}, Train Acc: {epoch_train_acc:.4f}, Val Acc: {epoch_val_acc:.4f}, Loss: {total_loss:.4f}")

    # Early stopping check
    if epoch_val_acc > best_val_acc:
        best_val_acc = epoch_val_acc
        best_model_state = model.state_dict()
        counter = 0
    else:
        counter += 1
        if counter >= patience:
            print(f"Early stopping triggered at epoch {epoch+1}")
            break

# Restore best model state
if best_model_state:
    model.load_state_dict(best_model_state)


# 10. Evaluation
model.eval()
y_true, y_pred, y_score = [], [], []
with torch.no_grad():
    for xb, yb in test_loader:
        xb = xb.to(device)
        logits = model(xb)
        probs = torch.softmax(logits, dim=1).cpu().numpy()
        preds = np.argmax(probs, axis=1)
        y_pred.extend(preds)
        y_true.extend(yb.numpy())
        y_score.extend(probs)

# 11. Confusion Matrix
conf_matrix = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(10, 6))
sns.heatmap(conf_matrix / np.sum(conf_matrix, axis=1, keepdims=True),
            annot=True, fmt=".2f", cmap="Blues",
            xticklabels=encoder.classes_, yticklabels=encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix: CNN + BiGRU + Attention")
plt.tight_layout()
plt.savefig("CNN_BiGRU_Attention_confusion_matrix.png")
plt.show()

# 12. Classification Report
print("Classification Report:")
print(classification_report(y_true, y_pred, target_names=encoder.classes_))

# 13. ROC Curve
y_test_bin = label_binarize(y_true, classes=range(num_classes))
y_score = np.array(y_score)
fpr, tpr, roc_auc = {}, {}, {}
for i in range(num_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_score[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

plt.figure(figsize=(10, 6))
colors = cycle(['aqua', 'darkorange', 'cornflowerblue', 'green', 'red', 'purple', 'brown'])
for i, color in zip(range(num_classes), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=2,
             label=f"Class {encoder.classes_[i]} (AUC = {roc_auc[i]:.2f})")
plt.plot([0, 1], [0, 1], "k--", lw=2)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve - CNN + BiGRU + Attention")
plt.legend(loc="lower right")
plt.tight_layout()
plt.savefig("CNN_BiGRU_Attention_ROC_Curve.png")
plt.show()









import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, label_binarize
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from itertools import cycle

# 1. Load dataset
df = pd.read_csv(r"C:\Users\anjali_jain\Downloads\emotion_dataset_cleaned.csv")
X = df.drop('label', axis=1).values
y = df['label'].values

# 2. Encode labels
encoder = LabelEncoder()
y = encoder.fit_transform(y)
num_classes = len(np.unique(y))

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.4, random_state=42, stratify=y
)

# 4. Reshape for CNN input
X_train = X_train[..., np.newaxis]
X_test = X_test[..., np.newaxis]

# 5. Convert to tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32).permute(0, 2, 1)  # (batch, channel, seq)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32).permute(0, 2, 1)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)
y_test_tensor = torch.tensor(y_test, dtype=torch.long)

train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
test_dataset = TensorDataset(X_test_tensor, y_test_tensor)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32)

# 6. Define CNN + Transformer Encoder Model
class CNNTransformer(nn.Module):
    def __init__(self, num_classes, seq_len, d_model=128, nhead=4, layers=2):
        super().__init__()
        self.cnn = nn.Sequential(
            nn.Conv1d(1, 64, 3, padding=1), nn.ReLU(), nn.MaxPool1d(2),
            nn.Conv1d(64, d_model, 3, padding=1), nn.ReLU(), nn.MaxPool1d(2)
        )                                 # L → L/4 ≈ 303
        self.pos = nn.Parameter(torch.randn(1, seq_len//4+1, d_model))
        self.cls = nn.Parameter(torch.randn(1, 1, d_model))
        enc = nn.TransformerEncoderLayer(d_model, nhead, batch_first=True)
        self.transformer = nn.TransformerEncoder(enc, layers)
        self.fc = nn.Sequential(
            nn.Linear(d_model, 64), nn.ReLU(), nn.Dropout(0.3),
            nn.Linear(64, num_classes)
        )


    def forward(self, x):
         x = self.cnn(x).permute(0, 2, 1)        # B, 303, d_model
         cls = self.cls.expand(x.size(0), -1, -1)
         x = torch.cat([cls, x], dim=1)          # B, 304, d_model   ← now length 304
         x = x + self.pos[:, :x.size(1)]         # slice PE AFTER concat
         x = self.transformer(x)
         return self.fc(x[:, 0])                 # CLS token

# 7. Initialize model
input_channels = 1
seq_len = X_train.shape[1]
#model = CNNTransformer(input_channels, num_classes, seq_len)
# -------------------------------------------------
# choose CPU or GPU *first*
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
# -------------------------------------------------

seq_len = X_train.shape[1]          # 1213

model = CNNTransformer(
    num_classes=num_classes,
    seq_len=seq_len,
    d_model=128,        # 128 % 4 == 0
    nhead=4
)

model = model.to(device)            # now 'device' is defined


model = CNNTransformer(
    num_classes=num_classes,        # 7 in your case
    seq_len=seq_len,                # 1213
    d_model=128,                    # 128 % 4 == 0  ✔
    nhead=4                         # default layers=2 is okay
).to(device)


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.to(device)

# 8. Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 9. Training with Early Stopping
num_epochs = 100  # Set higher value since early stopping is used
patience = 10
best_val_acc = 0.0
counter = 0
best_model_state = None
train_acc, val_acc = [], []

for epoch in range(num_epochs):
    model.train()
    correct, total = 0, 0
    running_loss = 0.0
    for X_batch, y_batch in train_loader:
        X_batch, y_batch = X_batch.to(device), y_batch.to(device)
        outputs = model(X_batch)
        loss = criterion(outputs, y_batch)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        _, predicted = torch.max(outputs.data, 1)
        total += y_batch.size(0)
        correct += (predicted == y_batch).sum().item()
        running_loss += loss.item()

    train_accuracy = correct / total
    train_acc.append(train_accuracy)

    # Validation
    model.eval()
    val_correct, val_total = 0, 0
    with torch.no_grad():
        for X_batch, y_batch in test_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            outputs = model(X_batch)
            _, predicted = torch.max(outputs.data, 1)
            val_total += y_batch.size(0)
            val_correct += (predicted == y_batch).sum().item()
    val_accuracy = val_correct / val_total
    val_acc.append(val_accuracy)

    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss:.4f}, Train Acc: {train_accuracy:.4f}, Val Acc: {val_accuracy:.4f}")

    # Early stopping check
    if val_accuracy > best_val_acc:
        best_val_acc = val_accuracy
        best_model_state = model.state_dict()
        counter = 0
    else:
        counter += 1
        if counter >= patience:
            print(f"Early stopping triggered at epoch {epoch+1}")
            break

# Restore best model
if best_model_state:
    model.load_state_dict(best_model_state)


# 10. Evaluation
model.eval()
all_preds = []
all_labels = []
all_probs = []

with torch.no_grad():
    for X_batch, y_batch in test_loader:
        X_batch = X_batch.to(device)
        outputs = model(X_batch)
        probs = nn.Softmax(dim=1)(outputs).cpu().numpy()
        preds = np.argmax(probs, axis=1)
        all_preds.extend(preds)
        all_labels.extend(y_batch.numpy())
        all_probs.extend(probs)

# 11. Classification report and confusion matrix
print("Classification Report:")
print(classification_report(all_labels, all_preds, target_names=encoder.classes_))

conf_matrix = confusion_matrix(all_labels, all_preds)
plt.figure(figsize=(10, 6))
sns.heatmap(conf_matrix / np.sum(conf_matrix, axis=0), annot=True, cmap='Blues', fmt='.2%',
            xticklabels=encoder.classes_, yticklabels=encoder.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.tight_layout()
plt.savefig("CNNTransformer_confusion_matrix.png")
plt.show()

# 12. ROC Curve
y_test_binarized = label_binarize(all_labels, classes=range(num_classes))
all_probs = np.array(all_probs)
fpr = dict()
tpr = dict()
roc_auc = dict()

for i in range(num_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], all_probs[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

fpr["micro"], tpr["micro"], _ = roc_curve(y_test_binarized.ravel(), all_probs.ravel())
roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

plt.figure()
lw = 2
colors = cycle(['aqua', 'darkorange', 'cornflowerblue', 'green', 'red', 'purple', 'brown'])
for i, color in zip(range(num_classes), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=lw,
             label=f'ROC curve of class {encoder.classes_[i]} (area = {roc_auc[i]:0.2f})')

plt.plot([0, 1], [0, 1], 'k--', lw=lw)
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.tight_layout()
plt.savefig("CNNTransformer_ROC_Curve.png")
plt.show()



class CNNTransformer(nn.Module):
    def __init__(self, input_channels, num_classes, seq_len, d_model=128, nhead=4, num_layers=2):
        super(CNNTransformer, self).__init__()
        self.cnn = nn.Sequential(
            nn.Conv1d(input_channels, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm1d(64),
            nn.MaxPool1d(2),

            nn.Conv1d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm1d(128),
            nn.MaxPool1d(2)
        )

        reduced_seq_len = seq_len // 4  # after two poolings
        self.positional_encoding = nn.Parameter(torch.randn(reduced_seq_len, d_model))

        encoder_layer = nn.TransformerEncoderLayer(d_model=d_model, nhead=nhead, batch_first=True)
        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)

        self.fc = nn.Sequential(
            nn.Linear(reduced_seq_len * d_model, 64),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(64, num_classes)
        )

    def forward(self, x):
        x = self.cnn(x)  # (batch, 128, seq/4)
        x = x.permute(0, 2, 1)  # (batch, seq, feature)
        x = x + self.positional_encoding  # Add positional encoding
        x = self.transformer(x)  # (batch, seq, feature)
        x = x.contiguous().view(x.size(0), -1)  # Flatten
        out = self.fc(x)
        return out

